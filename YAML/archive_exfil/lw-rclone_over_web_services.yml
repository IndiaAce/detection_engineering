- id: lw-aw_rclone_exfil_over_web_services
  properties:
    mitre: T1020
    search: >
      | tstats count min(_time) as firstTime max(_time) as lastTime 
        from datamodel=Endpoint.Processes 
        where `rclone_exfil_over_web_services_input`
          Processes.process IN ("*copy*", "*mega*", "*pcloud*", "*ftp*", "*--config*", "*--progress*", "*--no-check-certificate*", "*--ignore-existing*", "*--auto-confirm*", "*--transfers*", "*--multi-thread-streams*") 
        by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name
      | rename Processes.dest as dest, Processes.user as user, Processes.parent_process as parent_process, Processes.process_name as process_name, Processes.process as process, Processes.process_id as process_id, Processes.parent_process_id as parent_process_id, Processes.original_file_name as original_file_name
      | eval firstTime=strftime(firstTime, "%Y-%m-%dT%H:%M:%S"), lastTime=strftime(lastTime, "%Y-%m-%dT%H:%M:%S")
      | table firstTime lastTime dest user parent_process process_name process process_id parent_process_id original_file_name
      | `detect_rclone_command_line_usage_filter`
      | `rclone_exfil_drilldown`
    macros: 
      - id: rclone_exfil_over_web_services_input
        properties:
          definition: >
            Processes.original_file_name="rclone.exe" OR Processes.process_name="rclone.exe"
      - id: detect_rclone_command_line_usage_filter
        properties:
          definition: >
            | eval severity=case(
                like(process, "%--no-check-certificate%") AND like(process, "%--ignore-existing%"), "critical",
                like(process, "%--no-check-certificate%") OR like(process, "%--ignore-existing%"), "high",
                like(process, "%--config%") OR like(process, "%--progress%"), "medium",
                true(), "low"
            )
            | where severity IN ("critical", "high", "medium")
      - id: rclone_exfil_drilldown ```MAYBE```
        properties:
          definition: > 
            ```process-based```
            | tstats `summariesonly` count from datamodel=Endpoint.Processes 
              where Processes.process_id=$process_id$ 
                AND Processes.dest=$dest$ 
                AND Processes.user=$user$ 
              by _time Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name Processes.command_line Processes.file_path Processes.parent_process_path
            | table _time Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name Processes.command_line Processes.file_path Processes.parent_process_path
            ```OR ourbound network```
            | tstats `summariesonly` count from datamodel=Network_Traffic.All_Traffic 
              where All_Traffic.src=$dest$ 
              by _time All_Traffic.src All_Traffic.dest All_Traffic.dest_port All_Traffic.app All_Traffic.action All_Traffic.bytes All_Traffic.packets
            | table _time All_Traffic.src All_Traffic.dest All_Traffic.dest_port All_Traffic.app All_Traffic.action All_Traffic.bytes All_Traffic.packets
            ```OR UNION```
            | union 
                [ | tstats `summariesonly` count from datamodel=Endpoint.Processes 
                    where Processes.process_id=$process_id$ 
                      AND Processes.dest=$dest$ 
                      AND Processes.user=$user$ 
                    by _time Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name Processes.command_line Processes.file_path Processes.parent_process_path
                  | eval category="Process Activity"
                  | table _time Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name Processes.command_line Processes.file_path Processes.parent_process_path category]
                [ | tstats `summariesonly` count from datamodel=Network_Traffic.All_Traffic 
                    where All_Traffic.src=$dest$ 
                    by _time All_Traffic.src All_Traffic.dest All_Traffic.dest_port All_Traffic.app All_Traffic.action All_Traffic.bytes All_Traffic.packets
                  | eval category="Network Activity"
                  | rename All_Traffic.src as dest, All_Traffic.dest as dest_ip, All_Traffic.dest_port as dest_port, All_Traffic.app as app, All_Traffic.action as action, All_Traffic.bytes as bytes, All_Traffic.packets as packets
                  | table _time dest dest_ip dest_port app action bytes packets category]
            | sort _time

            ```That’s an interesting idea. I think the process piece may be a bit too narrow and the network piece maybe a bit too broad.

With the process piece here, we’d be essentially just showing them the same-ish thing that would have been present in the detection just in a slightly different way. But the more I think about it, the more I think that my original suggestion to show other processes from that host might not be all that useful anyway.

Thinking out loud - What if on the network piece, we narrow it down a bit to like only include external destinations and then also time >= first seen from the detection? That way we’re only getting network activity after the process execution where it’s leaving the client’s network. That could maybe then help the analyst decide if that related network activity is suspicious/malicious in nature by looking at the dest ip and bytes_out ?```

    index-based-search:
      - id: rclone_test_search
        search: >
          index=dev_link sourcetype=rclone_tst
          | eval _time=strptime(_time, "%Y-%m-%dT%H:%M:%S")
          | where like(process_name, "rclone.exe") OR like(process, "%rclone%")
          | where process_name IN ("*copy*", "*mega*", "*pcloud*", "*ftp*", "*--config*", "*--progress*", "*--no-check-certificate*", "*--ignore-existing*", "*--auto-confirm*", "*--transfers*", "*--multi-thread-streams*")
          | stats count min(_time) as firstTime max(_time) as lastTime 
            by dest user parent_process parent_process_name process_name process process_id parent_process_id 
          | eval firstTime=strftime(firstTime, "%Y-%m-%dT%H:%M:%S"), lastTime=strftime(lastTime, "%Y-%m-%dT%H:%M:%S")
          | table firstTime lastTime dest user parent_process parent_process_name process_name process process_id parent_process_id
          | `detect_rclone_command_line_usage_filter`