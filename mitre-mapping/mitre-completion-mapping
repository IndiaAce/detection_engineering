import csv
from collections import defaultdict

# Read TTP Coverages and organize them by search name
ttp_coverages = defaultdict(list)
all_ttp_ids = set()

with open('TTP_Coverages.csv', 'r') as f:
    reader = csv.reader(f)
    next(reader)  # Skip header
    for row in reader:
        search_id = row[0]
        ttp_id = row[1]
        if ttp_id != 'T0000':  # We ignore the 'Unknown' TTPs for coverage calculation
            ttp_coverages[search_id].append(ttp_id)
            all_ttp_ids.add(ttp_id)

# Read Alert Status Report
alert_status = defaultdict(lambda: {'SHADOW': False, 'LIVE': False})

with open('AlertStatusReport.csv', 'r') as f:
    reader = csv.reader(f)
    next(reader)  # Skip header
    for row in reader:
        search_name, client_name = row
        if search_name in ttp_coverages:
            alert_status[search_name][client_name] = True

# Calculate TTP coverage
covered_ttps = set()

for search_name, status in alert_status.items():
    if status['SHADOW'] or status['LIVE']:
        covered_ttps.update(ttp_coverages[search_name])

coverage_percentage = len(covered_ttps) / len(all_ttp_ids) * 100

# Generate the output CSV
output_data = [['TTP ID', 'Covered']]
for ttp_id in all_ttp_ids:
    covered = 'YES' if ttp_id in covered_ttps else 'NO'
    output_data.append([ttp_id, covered])

# Add coverage summary
output_data.append([])
output_data.append(['Total TTPs', len(all_ttp_ids)])
output_data.append(['Covered TTPs', len(covered_ttps)])
output_data.append(['Coverage Percentage', f"{coverage_percentage:.2f}%"])

# Write the output CSV
with open('TTP_Coverage_Report.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerows(output_data)

print('TTP coverage report generated successfully!')
